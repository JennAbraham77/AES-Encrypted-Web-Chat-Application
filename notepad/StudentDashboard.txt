import javax.swing.*;
import java.awt.*;
import java.sql.*;
import java.util.HashMap;

public class StudentDashboard {
    private String username;
    private final HashMap<String, Thread> pollingThreads = new HashMap<>();
    private final HashMap<String, JButton> cancelButtons = new HashMap<>();

    private static final String DB_URL = "jdbc:mysql://localhost:3306/securechatdb";
    private static final String DB_USER = "root";
    private static final String DB_PASS = "theglory095";

    public StudentDashboard(String username) {
        this.username = username;

        JFrame frame = new JFrame("Student Dashboard");
        frame.setSize(1300, 750);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setLocationRelativeTo(null);
        frame.setLayout(new BorderLayout(10, 10));
        frame.getContentPane().setBackground(new Color(44, 122, 107));

        frame.add(createTopPanel(username), BorderLayout.NORTH);

        JPanel buttonPanel = new GradientBackgroundPanel();
        buttonPanel.setLayout(new FlowLayout(FlowLayout.LEFT, 20, 20));
        buttonPanel.setBorder(BorderFactory.createEmptyBorder(10, 20, 10, 20));
        buttonPanel.setOpaque(false);

        JScrollPane scrollPane = new JScrollPane(buttonPanel);
        scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
        scrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        scrollPane.getViewport().setOpaque(false);

        JLabel messageLabel = new JLabel("Please choose from the given counselors:");
        messageLabel.setFont(new Font("Arial", Font.BOLD, 16));
        messageLabel.setHorizontalAlignment(SwingConstants.CENTER);
        messageLabel.setBorder(BorderFactory.createEmptyBorder(10, 0, 10, 0));
        messageLabel.setForeground(Color.WHITE);


        JPanel centerPanel = new JPanel() {
            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);
                Graphics2D g2d = (Graphics2D) g;
                Color color1 = new Color(71, 209, 71);  
                Color color2 = new Color(15, 61, 15 );    
                GradientPaint gp = new GradientPaint(0, 0, color1, getWidth(), getHeight(), color2);
                g2d.setPaint(gp);
                g2d.fillRect(0, 0, getWidth(), getHeight());
            }
        };
        centerPanel.setLayout(new BorderLayout());        
        
        centerPanel.add(messageLabel, BorderLayout.NORTH);
        centerPanel.add(scrollPane, BorderLayout.CENTER);

        frame.add(centerPanel, BorderLayout.CENTER);

        String[][] counselors = {
            {"counselor1", "Dr. Abc - Stress Management", "This is Dr. Abc, specializing in stress management. With years of experience in helping individuals cope with life's pressures, Dr. Abc offers tailored strategies to reduce stress and improve mental well-being. Whether you're facing academic, personal, or professional stress, Dr. Abc provides a compassionate and holistic approach to help you regain balance in your life.", "c1.png"},
            {"counselor2", "Mr. Def - Academic Support", "This is Mr. Def, specializing in academic support. With a deep understanding of the challenges students face in their academic journey, Mr. Def provides personalized guidance to help you succeed. From time management and study strategies to tackling difficult subjects, Mr. Def offers practical advice to improve your academic performance.", "c2.png"},
            {"counselor3", "Ms. Ghi - Personal Counseling", "This is Ms. Ghi, specializing in personal counseling. She is dedicated to helping individuals navigate personal challenges, build emotional resilience, and foster healthy relationships. Whether you're dealing with anxiety, self-esteem issues, family concerns, or personal growth obstacles, Ms. Ghi offers a safe, confidential, and supportive space to explore your thoughts and emotions", "c3.png"}
        };

        for (String[] counselor : counselors) {
            String counselorUsername = counselor[0];
            String counselorInfo = counselor[1];
            String counselorDescription = counselor[2];
            String counselorImagePath = counselor[3];

            JPanel profilePanel = new JPanel();
            profilePanel.setLayout(new BoxLayout(profilePanel, BoxLayout.Y_AXIS));
            profilePanel.setPreferredSize(new Dimension(380, 330));
            profilePanel.setBorder(BorderFactory.createCompoundBorder(
                    BorderFactory.createLineBorder(Color.GRAY, 1),
                    BorderFactory.createEmptyBorder(10, 10, 10, 10)
            ));
            profilePanel.setBackground(Color.WHITE);

            ImageIcon imageIcon = new ImageIcon(counselorImagePath);
            Image scaledImage = imageIcon.getImage().getScaledInstance(80, 80, Image.SCALE_SMOOTH);
            JLabel imageLabel = new JLabel(new ImageIcon(scaledImage));
            imageLabel.setAlignmentX(Component.CENTER_ALIGNMENT);

            JLabel infoLabel = new JLabel("<html><center>" + counselorInfo + "</center></html>");
            infoLabel.setFont(new Font("Arial", Font.BOLD, 13));
            infoLabel.setAlignmentX(Component.CENTER_ALIGNMENT);

            JTextArea descriptionArea = new JTextArea(counselorDescription);
            descriptionArea.setEditable(false);
            descriptionArea.setFont(new Font("Times new roman", Font.PLAIN, 14));
            descriptionArea.setLineWrap(true);
            descriptionArea.setWrapStyleWord(true);
            descriptionArea.setOpaque(false);
            descriptionArea.setAlignmentX(Component.CENTER_ALIGNMENT);
            descriptionArea.setMaximumSize(new Dimension(300, Integer.MAX_VALUE));


            JPanel buttonPanelForCounselor = new JPanel();
            buttonPanelForCounselor.setLayout(new BoxLayout(buttonPanelForCounselor, BoxLayout.Y_AXIS));
            buttonPanelForCounselor.setOpaque(false);

            JButton chatButton = new JButton("Chat with Counselor");
            chatButton.setBackground(new Color(34, 139, 34));
            chatButton.setFont(new Font("Arial", Font.BOLD, 12));
            chatButton.setFocusPainted(false);
            chatButton.setForeground(Color.WHITE);
            chatButton.addActionListener(e -> sendChatRequest(username, counselorUsername));

            JButton cancelButton = new JButton("Cancel Request");
            cancelButton.setBackground(new Color(255, 69, 0));
            cancelButton.setFont(new Font("Arial", Font.BOLD, 12));
            cancelButton.setFocusPainted(false);
            cancelButton.setForeground(Color.WHITE);
            cancelButton.setVisible(false);
            cancelButton.addActionListener(e -> cancelChatRequest(username, counselorUsername, cancelButton));

            buttonPanelForCounselor.add(chatButton);
            buttonPanelForCounselor.add(Box.createVerticalStrut(5));
            buttonPanelForCounselor.add(cancelButton);

            profilePanel.add(imageLabel);
            profilePanel.add(Box.createVerticalStrut(5));
            profilePanel.add(infoLabel);
            profilePanel.add(Box.createVerticalStrut(5));
            profilePanel.add(descriptionArea);
            profilePanel.add(Box.createVerticalStrut(10));
            profilePanel.add(buttonPanelForCounselor);

            buttonPanel.add(profilePanel);
            cancelButtons.put(counselorUsername, cancelButton);
        }

        frame.setVisible(true);
    }

    private JPanel createTopPanel(String username) {
        JPanel topPanel = new JPanel();
        topPanel.setLayout(new BoxLayout(topPanel, BoxLayout.Y_AXIS));
        topPanel.setBackground(new Color(11, 6, 31));

        JLabel headingLabel = new JLabel("<html><span style='color:white;'>Student Dashboard</span></html>", SwingConstants.CENTER);
        headingLabel.setFont(new Font("Serif", Font.BOLD, 24));
        headingLabel.setAlignmentX(Component.CENTER_ALIGNMENT);
        headingLabel.setBorder(BorderFactory.createEmptyBorder(10, 0, 5, 0));

        JLabel welcomeLabel = new JLabel("Welcome, " + username + "!", SwingConstants.CENTER);
        welcomeLabel.setFont(new Font("Papyrus", Font.BOLD, 18));
        welcomeLabel.setAlignmentX(Component.CENTER_ALIGNMENT);
        welcomeLabel.setBorder(BorderFactory.createEmptyBorder(5, 0, 10, 0));
        welcomeLabel.setOpaque(true);
        welcomeLabel.setForeground(Color.WHITE);
        welcomeLabel.setBackground(new Color(11, 6, 31));

        topPanel.add(headingLabel);
        topPanel.add(welcomeLabel);
        topPanel.add(Box.createVerticalStrut(15));

        return topPanel;
    }

    private void sendChatRequest(String studentUsername, String counselorUsername) {
        try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS)) {
            PreparedStatement deleteOld = conn.prepareStatement(
                "DELETE FROM chat_requests WHERE student_username = ? AND counselor_username = ? AND (status = 'ended' OR status = 'rejected')"
            );
            deleteOld.setString(1, studentUsername);
            deleteOld.setString(2, counselorUsername);
            deleteOld.executeUpdate();

            PreparedStatement checkStmt = conn.prepareStatement(
                "SELECT status FROM chat_requests WHERE student_username = ? AND counselor_username = ?"
            );
            checkStmt.setString(1, studentUsername);
            checkStmt.setString(2, counselorUsername);
            ResultSet rs = checkStmt.executeQuery();

            if (rs.next()) {
                String status = rs.getString("status");
                switch (status.toLowerCase()) {
                    case "accepted":
                        JOptionPane.showMessageDialog(null, "✅ Chat already accepted. Opening chat...");
                        new ChatUI(studentUsername, counselorUsername, true);
                        return;
                    case "pending":
                        JOptionPane.showMessageDialog(null, "⏳ Request already sent. Awaiting counselor's response...");
                        return;
                    default:
                        JOptionPane.showMessageDialog(null, "⚠ Unexpected chat status: " + status);
                        return;
                }
            }

            PreparedStatement insertStmt = conn.prepareStatement(
                "INSERT INTO chat_requests (student_username, counselor_username, status) VALUES (?, ?, 'pending')"
            );
            insertStmt.setString(1, studentUsername);
            insertStmt.setString(2, counselorUsername);
            insertStmt.executeUpdate();

            JOptionPane.showMessageDialog(null, "📩 Request sent to " + counselorUsername);
            cancelButtons.get(counselorUsername).setVisible(true);

            startPollingForAcceptance(studentUsername, counselorUsername);

        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, "❌ Error sending request.");
        }
    }

    private void startPollingForAcceptance(String studentUsername, String counselorUsername) {
        Thread previousThread = pollingThreads.get(counselorUsername);
        if (previousThread != null && previousThread.isAlive()) {
            previousThread.interrupt();
        }

        Thread pollingThread = new Thread(() -> {
            boolean chatStarted = false;
            while (!chatStarted && !Thread.currentThread().isInterrupted()) {
                try {
                    Thread.sleep(3000);
                    try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS)) {
                        PreparedStatement pollStmt = conn.prepareStatement(
                            "SELECT status FROM chat_requests WHERE student_username = ? AND counselor_username = ?"
                        );
                        pollStmt.setString(1, studentUsername);
                        pollStmt.setString(2, counselorUsername);
                        ResultSet rs = pollStmt.executeQuery();

                        if (rs.next()) {
                            String status = rs.getString("status");
                            switch (status.toLowerCase()) {
                                case "accepted":
                                    chatStarted = true;
                                    SwingUtilities.invokeLater(() -> {
                                        JOptionPane.showMessageDialog(null, "🎉 Counselor accepted! Starting chat...");
                                        cancelButtons.get(counselorUsername).setVisible(false);
                                        new ChatUI(studentUsername, counselorUsername, false);
                                    });
                                    break;
                                case "rejected":
                                    chatStarted = true;
                                    SwingUtilities.invokeLater(() -> {
                                        JOptionPane.showMessageDialog(null, "❌ Your chat request was rejected.");
                                        cancelButtons.get(counselorUsername).setVisible(false);
                                    });
                                    break;
                                case "ended":
                                    chatStarted = true;
                                    SwingUtilities.invokeLater(() -> {
                                        cancelButtons.get(counselorUsername).setVisible(false);
                                    });
                                    break;
                            }
                        }
                    }
                } catch (InterruptedException e) {
                    break;
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            }
        });

        pollingThreads.put(counselorUsername, pollingThread);
        pollingThread.start();
    }

    private void cancelChatRequest(String studentUsername, String counselorUsername, JButton cancelButton) {
        try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS)) {
            PreparedStatement deleteStmt = conn.prepareStatement(
                "DELETE FROM chat_requests WHERE student_username = ? AND counselor_username = ? AND status = 'pending'"
            );
            deleteStmt.setString(1, studentUsername);
            deleteStmt.setString(2, counselorUsername);
            int rows = deleteStmt.executeUpdate();

            if (rows > 0) {
                JOptionPane.showMessageDialog(null, "❌ Request to " + counselorUsername + " cancelled.");
                cancelButton.setVisible(false);

                Thread thread = pollingThreads.get(counselorUsername);
                if (thread != null && thread.isAlive()) {
                    thread.interrupt();
                }
            } else {
                JOptionPane.showMessageDialog(null, "⚠️ Request can't be cancelled. It might have already been accepted.");
            }

        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, "❌ Error cancelling request.");
        }
    }

    public static void main(String[] args) {
        if (args.length < 1) {
            System.out.println("Usage: java StudentDashboard <studentUsername>");
            return;
        }
        new StudentDashboard(args[0]);
    }
}

// Custom gradient panel for background
class GradientBackgroundPanel extends JPanel {
    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2d = (Graphics2D) g;
        int width = getWidth();
        int height = getHeight();

        Color teal = new Color(145, 207, 196);
        Color green = new Color(177, 224, 192);

        GradientPaint gp = new GradientPaint(0, 0, teal, 0, height, green);
        g2d.setPaint(gp);
        g2d.fillRect(0, 0, width, height);
    }
}
